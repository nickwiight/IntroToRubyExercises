Methods are a named collection of reusable code. Methods are defined with def.

def method
  # method body goes here
end

Methods are called by typing their name and passing in any arguemnts. Arguements are
also called parameters. They are used to pass in information from outside the method 
scope. Parameters should be named like variables, with accuracy and meaningful names.

Parameters can be given a default value. If no parameter is passed to the method when
its called, it will use the default value instead.

def method(parameter)
  # method body goes here
end

Parentheses are optional when calling methods. Both of the following execute code with
no errors:

puts "String"
puts("String")

Methods cannot access information outside of their method without it being passed in
through parameters. Method invocation with a block can access information outside
the method scope, however.

Methods can be called with an explicit caller. This defines what object the method
works on.

object.method("parameters")

Some methods are able to mutate arguements, even if they cannot alter their values.
For example .pop removes the last value of an array. If you call .pop on a parameter
of a funciton, the passed in variable will also have its last index removed. The only
way to know which functions mutate arguements is to have it memorized or look at the 
documentation. 

Ruby alwasy returns the value of the last line of a method unless an explicit return
is called first. Explicit returns are made with return.

def method(argument)
  return argument + 3
end

When a return is made in a method, any code following it is not executed and the
method exits. 

Methods can be chained since all methods always return *something*, even if that 
something is nil. Chain a method by calling .method.method2.

def add_three(n)
  n + 3
end

add_three(5).times { puts "this would print 8 times and return 8" }

Method calls can be passed as arguments to a method. 

multiply(add(10, 5), subtract(20, 10))

The above works and would return 150 (assuming the methods listed worked as expected).
Nested calls like this always use parentheses to avoid confusion. 

Ruby uses a Call Stack to handle methods calling methods. When a new method is called,
it is sent to the top of the stack until it finishes executing, then finishes executing
whatever method called it first. It works just like my stack state machine I use for
games. 

When the last method finishes executing (which is main), the stack is emptied and the
program ends.
